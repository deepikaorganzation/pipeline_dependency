name: Deploy ADF LinkedService

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

env: 
  keyVaultName: $(jq -r ".keyVaultName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  awss3-accesskeyid: $(jq -r ".awss3-accesskeyid" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  awss3-secretaccesskey: $(jq -r ".awss3-secretaccesskey" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  sftp-key: $(jq -r ".sftp-key" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  adfName: $(jq -r ".adfName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  resourceGroupName: $(jq -r ".resourceGroupName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)

jobs:
  
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get install jq

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: >
              {
                "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
                "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
                "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}",
                "tenantId":"${{ secrets.AZURE_TENANT_ID }}"
              }
        enable-AzPSSession: true

    # - name: Deploy Key Vault
    #   run: |
    #       keyVaultLinkedService=$(cat ./linkedService/lsAzureKeyVault.json)
    #       keyVaultLinkedService=$(echo "$keyVaultLinkedService" | jq --arg keyVaultUrl "https://${{env.keyVaultName}}.vault.azure.net/" '.properties.typeProperties.baseUrl = $keyVaultUrl')
    #       echo "$keyVaultLinkedService"
    #       linkedServices=$(jq -n \
    #         --arg keyVaultLinkedService "$keyVaultLinkedService" \
    #         '[
    #           {
    #             "name": "lsAzureKeyVault", 
    #             "definition": $keyVaultLinkedService | fromjson 
    #           }
    #             ]')
    #         az deployment group create \
    #         --resource-group ${{ env.resourceGroupName }} \
    #         --template-file ./bicep/modules/linkedservice.bicep \
    #         --parameters dataFactoryName=${{ env.adfName }} \
    #         --parameters linkedServices="$linkedServices" 

    - name: Extract Linked Service Order from JSON
      id: get_linked_service_order
      run: |
        LINKED_SERVICES=$(jq -c '.linkedServices | sort_by(.dependsOn | length)' bicep/parameters/Dependencies.json)
        echo "LINKED_SERVICES=$LINKED_SERVICES" >> $GITHUB_ENV
        echo $LINKED_SERVICES
    
    - name: Deploy Linked Services in Order
      run: |
        for row in $(echo "$LINKED_SERVICES" | jq -c '.[]'); do
          LINKED_SERVICE_NAME=$(echo "$row" | jq -r '.name')
          if [[ "$LINKED_SERVICE_NAME" == "lsAzureKeyVault" ]]; then
            keyVaultLinkedService=$(cat ./linkedService/lsAzureKeyVault.json)
            linkedServiceDefinition=$(echo "$keyVaultLinkedService" | jq --arg keyVaultUrl "https://${{env.keyVaultName}}.vault.azure.net/" '.properties.typeProperties.baseUrl = $keyVaultUrl')
          else
          linkedServiceDefinition=$(jq -c '{properties: .properties}' linkedService/"$LINKED_SERVICE_NAME".json)
          fi
          # Construct JSON object correctly
          linkedServices=$(jq -n --arg name "$LINKED_SERVICE_NAME" --argjson definition "$linkedServiceDefinition" \
            '[ 
              {
                "name": $name, 
                "definition": $definition
              }
            ]')

          echo "$linkedServices"

          az deployment group create \
            --resource-group  ${{ env.resourceGroupName }} \
            --template-file ./bicep/modules/linkedservice.bicep \
            --parameters dataFactoryName=${{ env.adfName }} linkedServices="$linkedServices"
          done 
            
