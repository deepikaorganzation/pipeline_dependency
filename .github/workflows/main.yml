name: Deploy ADF Pipelines

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-adf:
    env:
        ENV_VAR: "staging"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install jq

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: >
                {
                  "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
                  "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
                  "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}",
                  "tenantId":"${{ secrets.AZURE_TENANT_ID }}"
                }
          enable-AzPSSession: true

      - name: Deploy ADF Instance
        run: |
          az deployment group create \
            --resource-group komatsu-poc \
            --template-file main.bicep \
            --parameters adfName=komatsu-test-poc

      - name: Extract Pipeline Order from JSON
        id: get_pipeline_order
        run: |
          PIPELINES=$(jq -c '.pipelines | sort_by(.dependsOn | length)' dependencies.json)
          echo "PIPELINES=$PIPELINES" >> $GITHUB_ENV

      - name: Deploy Pipelines in Order
        run: |
          for row in $(echo "$PIPELINES" | jq -c '.[]'); do
             NEW_JSON=$(jq --arg env "$ENV_VAR" \
              '(.name // "") as $origName
              | (.properties.activities[].typeProperties.pipeline.referenceName // "") as $origReference
              | .name = if $origName != "" then $origName | sub("dev|qa|uat|prod"; $env; "g") else $origName end
              | .properties.activities[].typeProperties.pipeline.referenceName = if $origReference != "" then $origReference | sub("dev|qa|uat|prod"; $env; "g") else $origReference end' pipeline/"$PIPELINE_NAME".json)


            echo "$NEW_JSON"

            PIPELINE_NAME=$(echo "$NEW_JSON" | jq -r '.name')
            NEW_NAME=$(jq -r --arg env "$ENV_VAR" --arg pipeline "$PIPELINE_NAME" \
              '.name | sub("dev|qa|uat|prod"; $env; "g")' pipeline/"$PIPELINE_NAME".json)
            echo "Deploying $PIPELINE_NAME..."
            az deployment group create \
              --resource-group komatsu-poc \
              --template-file pipeline.bicep \
              --parameters factoryName=komatsu-test-poc pipelineName=$NEW_NAME
          done

      - name: Extract Linked Service Order from JSON
        id: get_linked_service_order
        run: |
          LINKED_SERVICES=$(jq -c '.linkedServices | sort_by(.dependsOn | length)' dependencies.json)
          echo "LINKED_SERVICES=$LINKED_SERVICES" >> $GITHUB_ENV
          
          echo "$LINKED_SERVICES"

      - name: Deploy Linked Services in Order
        run: |
          for row in $(echo "$LINKED_SERVICES" | jq -c '.[]'); do
            LINKED_SERVICE_NAME=$(echo "$row" | jq -r '.name')

            NEW_JSON=$(jq --arg env "$ENV_VAR" \
              '(.name // "") as $origName
              | (.properties.typeProperties.connectionString.store.referenceName // "") as $origReference
              | .name = if $origName != "" then $origName | sub("dev|qa|uat|prod"; $env; "g") else $origName end
              | .properties.typeProperties.connectionString.store.referenceName = if $origReference != "" then $origReference | sub("dev|qa|uat|prod"; $env; "g") else $origReference end' linkedService/"$LINKED_SERVICE_NAME".json)

            echo "Deploying Linked Service: $NEW_JSON"

            # Extract the new name from NEW_JSON
            NEW_NAME_LS=$(echo "$NEW_JSON" | jq -r '.name')

            # Construct JSON object correctly
            linkedServices=$(jq -n --arg name "$NEW_NAME_LS" --argjson definition "$NEW_JSON" \
              '[ 
                {
                  "name": $name, 
                  "definition": $definition
                }
              ]')
            echo "$linkedServices"
            
            az deployment group create \
              --resource-group komatsu-poc \
              --template-file linkedService.bicep \
              --parameters adfName=komatsu-test-poc linkedServices="$linkedServices"
          done


        # for row in $(echo "$LINKED_SERVICES" | jq -c '.[]'); do
        #   LINKED_SERVICE_NAME=$(echo "$row" | jq -r '.name')
        #   # Ensure LINKED_SERVICE_NAME is not empty
        #   if [[ -z "$LINKED_SERVICE_NAME" ]]; then
        #       echo "Error: LINKED_SERVICE_NAME is empty" >&2
        #       exit 1
        #   fi
        #   echo "$LINKED_SERVICE_NAME"
        #   # Modify the name dynamically based on the environment
        #   NEW_NAME_LS=$(jq -r --arg env "$ENV_VAR" --arg linkedService "$LINKED_SERVICE_NAME"  '.name | sub("dev|qa|uat|prod"; $env; "g")' linkedService/"$LINKED_SERVICE_NAME".json)
        #   echo "$NEW_NAME_LS"
        #   # Ensure NEW_NAME_LS is not empty
        #   if [[ -z "$NEW_NAME_LS" ]]; then
        #       echo "Error: NEW_NAME_LS is empty" >&2
        #       exit 1
        #   fi

        #   # Validate and read JSON file
        #   if [[ ! -f "linkedService/$LINKED_SERVICE_NAME.json" ]]; then
        #       echo "Error: linkedService/$LINKED_SERVICE_NAME.json file does not exist" >&2
        #       exit 1
        #   fi

        #   linkedServiceDefinition=$(jq -c '{properties: .properties}' linkedService/"$LINKED_SERVICE_NAME".json)
        #   echo "$linkedServiceDefinition"
        #   # Check if JSON parsing was successful
        #   if [[ -z "$linkedServiceDefinition" || "$linkedServiceDefinition" == "null" ]]; then
        #       echo "Error: linkedServiceDefinition JSON is empty or invalid" >&2
        #       exit 1
        #   fi

        #   # Construct JSON object correctly
        #   linkedServices=$(jq -n --arg name "$NEW_NAME_LS" --argjson definition "$linkedServiceDefinition" \
        #   '[ 
        #     {
        #       "name": $name, 
        #       "definition": $definition  
        #     }
        #   ]')
        #   echo "$linkedServices"
        #   # Ensure linkedServices is valid JSON
        #   if [[ -z "$linkedServices" || "$linkedServices" == "null" ]]; then
        #       echo "Error: linkedServices JSON is empty or invalid" >&2
        #       exit 1
        #   fi

        #   echo "Deploying Linked Service: $NEW_NAME_LS"

        #   az deployment group create \
        #     --resource-group komatsu-poc \
        #     --template-file linkedService.bicep \
        #     --parameters adfName=komatsu-test-poc linkedServices="$linkedServices"
        # done
