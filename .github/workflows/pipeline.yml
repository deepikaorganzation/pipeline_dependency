# name: Deploy ADF Pipelines

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

env: 
  adfName: $(jq -r ".adfName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  resourceGroupName: $(jq -r ".resourceGroupName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  ENV_VAR: ${{ inputs.environment }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: >
              {
                "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
                "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
                "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}",
                "tenantId":"${{ secrets.AZURE_TENANT_ID }}"
              }
        enable-AzPSSession: true  # Make sure to store your Azure credentials as secrets

    - name: Extract Pipeline Order from JSON
      id: get_pipeline_order
      run: |
        PIPELINES=$(jq -c '.pipelines | sort_by(.dependsOn | length)' bicep/parameters/Dependencies.json)
        echo "PIPELINES=$PIPELINES" >> $GITHUB_ENV

    - name: Deploy Pipelines in Order
      run: |
        for row in $(echo "$PIPELINES" | jq -c '.[]'); do
          PIPELINE_NAME=$(echo "$row" | jq -r '.name')

          # Read and transform JSON
          NEW_JSON=$(jq --arg env "$ENV_VAR" '
            (.name // "") as $origName
            | .name = if $origName != "" then $origName | sub("dev|qa|uat|prod"; $env; "g") else $origName end
            | (.properties.activities[]? | select(has("typeProperties")) | .typeProperties.pipeline.referenceName)? |= 
              if . != null then sub("dev|qa|uat|prod"; $env; "g") else . end' pipeline/"$PIPELINE_NAME".json)

          # Ensure NEW_JSON is valid JSON
          if [[ -z "$NEW_JSON" || "$NEW_JSON" == "null" ]]; then
              echo "Error: NEW_JSON is empty or invalid" >&2
              exit 1
          fi
          NEW_NAME_PL=$(echo "$NEW_JSON" | jq -r '.name')
          # Construct JSON object correctly
          pipeline=$(jq -n --arg name "$NEW_NAME_PL" --argjson definition "$NEW_JSON" '
            [
              {
                "name": $name, 
                "definition": $definition
              }
            ]')

          echo "Final pipeline JSON: $pipeline"

          # Ensure pipeline is valid JSON
          if [[ -z "$pipeline" || "$pipeline" == "null" ]]; then
              echo "Error: pipeline JSON is empty or invalid" >&2
              exit 1
          fi

          az deployment group create \
            --resource-group ${{ env.resourceGroupName }} \
            --template-file ./bicep/modules/pipeline.bicep \
            --parameters dataFactoryName=${{ env.adfName }} pipelines="$pipeline"
        done

    # - name: Read pipeline1 JSON files and deploy
    #   run: |
    #     # Ensure the correct path to the JSON files
    #     pipeline1=$(cat ./pipeline/JeremiahTest.json)
    #     pipeline2=$(cat ./pipeline/kom-copyAzureBlobToAdobeComSFTP-dev-pipe.json)
    #     pipeline6=$(cat ./pipeline/kom-pimAzureBlobPartsAssetImgMedia-dev-pipe.json)
    #     pipeline7=$(cat ./pipeline/kom-pimAzureBlobPartsAssetImgMetadata-dev-pipe.json)

    #     # Construct a JSON array with the pipeline contents
    #     pipelines=$(jq -n \
    #       --arg pipeline1 "$pipeline1" \
    #       --arg pipeline2 "$pipeline2" \
    #       --arg pipeline6 "$pipeline6" \
    #       --arg pipeline7 "$pipeline7" \
    #       '[
    #         {
    #           "name": "JeremiahTest",
    #           "definition": $pipeline1 | fromjson
    #         },
    #         {
    #           "name": "kom-copyAzureBlobToAdobeComSFTP-dev-pipe",
    #           "definition": $pipeline2 | fromjson
    #         },
    #         {
    #           "name": "kom-pimAzureBlobPartsAssetImgMedia-dev-pipe",
    #           "definition": $pipeline6 | fromjson
    #         },
    #         {
    #           "name": "kom-pimAzureBlobPartsAssetImgMetadata-dev-pipe",
    #           "definition": $pipeline7 | fromjson
    #         }
    #       ]')

    #     # Deploy using Bicep (or ARM template)
    #     az deployment group create \
    #       --resource-group ${{ env.resourceGroupName }} \
    #       --template-file ./bicep/modules/pipeline.bicep \
    #       --parameters dataFactoryName=${{ env.adfName }} \
    #       --parameters pipelines="$pipelines"

    # - name: Read pipeline2 JSON files and deploy
    #   if: success()
    #   run: |
    #     # Ensure the correct path to the JSON files
    #     pipeline3=$(cat ./pipeline/kom-pimAdobeExport-dev-pipe.json)
    #     pipeline4=$(cat ./pipeline/kom-pimAdobeExportResubmit-dev-pipe.json)
    #     pipeline5=$(cat ./pipeline/kom-pimAzureBlobPartsAssetImgControl-dev-pipe.json)
        
    #     # Construct a JSON array with the pipeline contents
    #     pipelines=$(jq -n \
    #       --arg pipeline3 "$pipeline3" \
    #       --arg pipeline4 "$pipeline4" \
    #       --arg pipeline5 "$pipeline5" \
    #       '[
    #         {
    #           "name": "kom-pimAzureBlobPartsAssetImgControl-dev-pipe",
    #           "definition": $pipeline3 | fromjson
    #         },
    #         {
    #           "name": "kom-pimAdobeExport-dev-pipe",
    #           "definition": $pipeline4 | fromjson
    #         },
    #         {
    #           "name": "kom-pimAdobeExportResubmit-dev-pipe",
    #           "definition": $pipeline5 | fromjson
    #         }
    #       ]')

    #     # Deploy using Bicep (or ARM template)
    #     az deployment group create \
    #       --resource-group ${{ env.resourceGroupName }} \
    #       --template-file ./bicep/modules/pipeline.bicep \
    #       --parameters dataFactoryName=${{ env.adfName }} \
    #       --parameters pipelines="$pipelines"
