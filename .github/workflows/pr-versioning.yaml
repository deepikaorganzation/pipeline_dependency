name: PR Versioning Trigger

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if PR was merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" != "true" ]]; then
            echo "PR was closed but not merged. Skipping."
            exit 0
          fi

      - name: Parse PR checkboxes for inputs
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const body = pr.data.body || "";

            let changeType = 'Minor'; // default
            if (body.includes('[x] Major')) changeType = 'Major';
            else if (body.includes('[x] Patch')) changeType = 'Patch';
            else if (body.includes('[x] NoChange')) changeType = 'NoChange';

            let environment = 'dev'; // default
            if (body.includes('[x] qa')) environment = 'qa';
            else if (body.includes('[x] uat')) environment = 'uat';
            else if (body.includes('[x] prod')) environment = 'prod';

            core.setOutput('change_type', changeType);
            core.setOutput('environment', environment);

      - name: Get latest tag and determine version change type
        if: ${{ steps.parse.outputs.environment == 'prod' }}
        id: versioning
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${LAST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d '.' -f 1)
          MINOR=$(echo $VERSION | cut -d '.' -f 2)
          PATCH=$(echo $VERSION | cut -d '.' -f 3)

          changetype="${{ steps.parse.outputs.change_type }}"
          if echo "$changetype" | grep -i "Major"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$changetype" | grep -i "Minor"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif echo "$changetype" | grep -i "Patch"; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and push new version tag
        if: ${{ steps.parse.outputs.environment == 'prod' && github.ref_name == 'main' }}
        run: |
          git config --global user.email "souvikg90@gmail.com"
          git config --global user.name "sghosh"
          git tag -a $NEW_VERSION -m "Release version $NEW_VERSION"
          git push origin $NEW_VERSION
