name: Deploy ADF Trigger

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

env: 
  adfName: $(jq -r ".adfName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  resourceGroupName: $(jq -r ".resourceGroupName" ./bicep/parameters/${{ inputs.environment }}Parameters.json)
  triggerFiles: './trigger/triggerEvtPIMAdobeExportMachineAttributesResubmit.json ./trigger/triggerEvtPIMAdobeExportMachineStructureHierarchyResubmit.json ./trigger/triggerEvtPIMAdobeExportPartsResubmit.json ./trigger/triggerEvtPIMAdobeExportSalesHierarchyResubmit.json ./trigger/triggerSchPIMAdobeExportMachineAttributes.json ./trigger/triggerSchPIMAdobeExportMachineStructureHierarchy.json ./trigger/triggerSchPIMAdobeExportParts.json ./trigger/triggerSchPIMAdobeExportSalesHierarchy.json ./trigger/triggerSchPIMAzureBlobPartsAssetImg.json'

jobs:

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: >
              {
                "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
                "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
                "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}",
                "tenantId":"${{ secrets.AZURE_TENANT_ID }}"
              }
        enable-AzPSSession: true  # Make sure to store your Azure credentials as secrets

    - name: Read Trigger JSON files and deploy
      run: |
        # Initialize an empty array for triggers
        TriggerArray=()

        # Loop through each trigger file and modify its content dynamically
        for file in ${{ env.triggerFiles }}; do
            # Process each trigger and update the pipelineReference and scope dynamically based on the environment
            updatedTrigger=$(jq --arg env "${{ inputs.environment }}" '
              walk(
                if type == "object" then
                  # Update pipelineReference.referenceName if it exists
                  (.pipelineReference.referenceName // empty) |= sub("dev|qa|uat|prod"; $env; "g") |
                  # Update typeProperties.scope if it exists
                  (.typeProperties.scope // empty) |= sub("dev|Dev|qa|QA|uat|UAT|prod"; $env; "g")
                else
                  .
                end
              )' "$file")
        
            # Extract the base file name without extension for the name in the final array
            triggerName=$(basename "$file" .json)
        
            # Add the processed trigger to the TriggerArray
            TriggerArray+=(
              "{ \"name\": \"$triggerName\", \"definition\": $updatedTrigger }"
            )
        done


        # Construct a JSON array for the triggers
        TriggerJSON="[ ${TriggerArray[*]} ]"

        # Deploy using Bicep (or ARM template)
        az deployment group create \
          --resource-group ${{ env.resourceGroupName }} \
          --template-file ./bicep/modules/trigger.bicep \
          --parameters dataFactoryName=${{ env.adfName }} \
          --parameters triggers="$TriggerJSON"
