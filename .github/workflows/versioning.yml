name: Versioning and Tagging

on:
  push:
    branches:
      - main

  # Allow the user to trigger the workflow manually
  workflow_dispatch:
    inputs:
      changeType:
        required: true
        type: choice
        description: 'Specify whether the version change is "major" or "minor"'
        options:
          - major
          - minor

permissions:
  contents: write

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Get latest tag and version increment
        id: versioning
        run: |
          # Get the latest tag or default to v1.0.0 if none exists
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${LAST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d '.' -f 1)
          MINOR=$(echo $VERSION | cut -d '.' -f 2)
          PATCH=$(echo $VERSION | cut -d '.' -f 3)

          # Determine the version increment based on user input
          if [ "${{ github.event.inputs.changeType }}" == "minor" ]; then
            # Increment MINOR for a minor release
            MINOR=$((MINOR + 1))
            PATCH=0  # Reset PATCH for a new minor release
          elif [ "${{ github.event.inputs.changeType }}" == "major" ]; then
            # Increment MAJOR for a major release
            MAJOR=$((MAJOR + 1))
            MINOR=0  # Reset MINOR for a new major release
            PATCH=0  # Reset PATCH for a new major release
          else
            echo "Invalid changeType. Please specify 'major' or 'minor'."
            exit 1
          fi

          # Construct the new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and push new version tag
        run: |
          git config --global user.email "souvikg90@gmail.com"
          git config --global user.name "souvikg90"
          git tag -a $NEW_VERSION -m "Release version $NEW_VERSION"
          git push origin $NEW_VERSION
