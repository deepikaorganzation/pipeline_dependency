name: Versioning and Tagging

on:
  workflow_call:
    inputs:
      change-type:
        required: true
        type: string
      environment:
        required: true
        type: string

permissions:
  contents: write

jobs:
  versioning:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Get latest tag and determine version change type
        if: 
        id: versioning
        run: |
          # Get the latest tag or default to v1.0.0 if none exists
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          VERSION=${LAST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d '.' -f 1)
          MINOR=$(echo $VERSION | cut -d '.' -f 2)
          PATCH=$(echo $VERSION | cut -d '.' -f 3)

          # Check if any commit message contains "BREAKING CHANGE"
          changetype=${{inputs.change-type}}
          if echo "$changetype" | grep -i "major"; then
            # If a BREAKING CHANGE is found, it's a major version update
            echo "Detected BREAKING CHANGE "
            MAJOR=$((MAJOR + 1))
            MINOR=0  # Reset MINOR for a major release
            PATCH=0  # Reset PATCH for a new major release
          else
            # If no BREAKING CHANGE is found, it's a minor version update
            MINOR=$((MINOR + 1))
            PATCH=0  # Reset PATCH for a new minor release
          fi

          # Construct the new version.
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and push new version tag
        run: |
          git config --global user.email "souvikg90@gmail.com"
          git config --global user.name "souvikg90"
          git tag -a $NEW_VERSION -m "Release version $NEW_VERSION"
          git push origin $NEW_VERSION
