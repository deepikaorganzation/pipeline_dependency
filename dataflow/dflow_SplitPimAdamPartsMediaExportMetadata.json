{
	"name": "dflow_SplitPimAdamPartsMediaExportMetadata",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsPIM_Adobe_PartsAssetImg_AzureBlobJson",
						"type": "DatasetReference"
					},
					"name": "sourceReadMetadataJson"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dsPIM_Adobe_Export_AzureBlob",
						"type": "DatasetReference"
					},
					"name": "sinkWriteToBlobContainer"
				},
				{
					"name": "sinkOutput"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnFileName"
				},
				{
					"name": "aggregateAttachmentKey"
				},
				{
					"name": "flattenUnrollAttachments"
				},
				{
					"name": "flattenUnrollImages"
				},
				{
					"name": "aggregateImageKey"
				},
				{
					"name": "joinImagesandAttachmentsColumns"
				},
				{
					"name": "derivedColumnImageKey"
				},
				{
					"name": "derivedColumnAttachmentKey"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     metadataFileName as string,",
				"     metadataBlobPath as string,",
				"     batchId as string",
				"}",
				"source(output(",
				"          partNumber as string,",
				"          businessUnit as string,",
				"          longDescription as string,",
				"          salesHierarchy as (salesHierarchyLevel1Identifier as string, salesHierarchyLevel1Description as string)[],",
				"          images as (name as string, type as string, sequence as string)[],",
				"          attachments as (name as string, type as string, language as string)[],",
				"          SDSDocumentURL as (URL as string, language as string)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments',",
				"     wildcardPaths:[(concat($metadataBlobPath,'/',$metadataFileName))]) ~> sourceReadMetadataJson",
				"sourceReadMetadataJson derive(filename = concat($metadataBlobPath,'/parts/',split($metadataFileName,'.json')[1],'_',partNumber,'.json'),",
				"          batchId = $batchId) ~> derivedColumnFileName",
				"derivedColumnAttachmentKey aggregate(groupBy(AttachmentKey),",
				"     total_attachments = count(attachments)) ~> aggregateAttachmentKey",
				"sourceReadMetadataJson foldDown(unroll(attachments),",
				"     mapColumn(",
				"          attachments",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenUnrollAttachments",
				"sourceReadMetadataJson foldDown(unroll(images),",
				"     mapColumn(",
				"          images",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenUnrollImages",
				"derivedColumnImageKey aggregate(groupBy(ImageKey),",
				"     total_image = count(images)) ~> aggregateImageKey",
				"aggregateImageKey, aggregateAttachmentKey join(ImageKey == AttachmentKey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinImagesandAttachmentsColumns",
				"flattenUnrollImages derive(ImageKey = 1) ~> derivedColumnImageKey",
				"flattenUnrollAttachments derive(AttachmentKey = 1) ~> derivedColumnAttachmentKey",
				"derivedColumnFileName aggregate(groupBy(Key = 1),",
				"     partNumbers = collect(partNumber)) ~> aggregate1",
				"aggregate1, select1 join(aggregate1@Key == select1@Key,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"joinImagesandAttachmentsColumns select(mapColumn(",
				"          Key = ImageKey,",
				"          total_image,",
				"          total_attachments",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join1 derive(Total_Count = total_image+total_attachments) ~> derivedColumn1",
				"derivedColumnFileName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     rowUrlColumn:'filename',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0) ~> sinkWriteToBlobContainer",
				"derivedColumn1 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          partNumbers,",
				"          Total_Count",
				"     )) ~> sinkOutput"
			]
		}
	}
}